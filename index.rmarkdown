---
title: "Analysis of Suicide and HDI Data in 2019"
author: "Adri√°n CALVO VALDERRAMA"
format: 
  dashboard:
    nav-buttons: 
    - icon: github
      href: https://github.com/adcalvoval/adcv_RMCQ3_capstone
      target: _blank
    - icon: clipboard2-data
      href: https://www.gapminder.org/data/
      target: _blank
theme: flatly
execute:
  echo: false
  warning: false
  message: false
editor_options: 
  chunk_output_type: console
---

```{r}
# Load packages 
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, 
               here,
               sf,
               bslib, 
               bsicons,
               rnaturalearth, 
               plotly, 
               countrycode, 
               htmltools, 
               reactable,
               janitor,
               readxl,
               poliscidata,
               stringr,
               formattable
               )
options(scipen = 999)
```

```{r}
# Getting the data

happy <- read_csv(here("data/hapiscore_whr.csv"))
gdp <- read_csv(here("data/gdp_pcap.csv"))
unemp_male <- read_csv((here("data/male_long_term_unemployment_rate_percent.csv")))
suicide <- read_csv(here("data/suicide_total_deaths.csv"))
geo <- read_excel(here("data/Data Geographies - v2 - by Gapminder (2).xlsx"), sheet = 2)
pop <- read_csv(here("data/pop.csv")) # missing data for significant countries (e.g. China, India)
data("world") # Using instead of gapminder population data to include major countries
hdi<- read_csv(here("data/hdi_human_development_index.csv"))
```

```{r include=FALSE}
suicide_clean <- 
  suicide %>%
  mutate(across(`1990`:`2019`, ~ str_replace_all(.x, "(\\d+\\.?\\d*)k", "\\1e3"))) %>%  
  mutate(across(`1990`:`2019`, ~ str_replace_all(.x, "(\\d+\\.?\\d*)M", "\\1e6"))) %>%   
  mutate(across(`1990`:`2019`, ~ as.numeric(.x)))  

pop_clean <-
  world %>% 
  select(country, pop_total) %>% 
  mutate(population = (pop_total * 1000000)) %>% 
  select(!pop_total)


pop_clean2 <-
  pop %>% 
  select(country,`1990`:`2019`) %>% 
    mutate(across(`1990`:`2019`, ~ str_replace_all(.x, "(\\d+\\.?\\d*)k", "\\1e3"))) %>%  
    mutate(across(`1990`:`2019`, ~ str_replace_all(.x, "(\\d+\\.?\\d*)M", "\\1e6"))) %>%   
    mutate(across(`1990`:`2019`, ~ as.numeric(.x))) %>% 
  pivot_longer(cols = `1990`:`2019`,
               names_to = "year",
               values_to = "population")


View(pop_clean2)


setdiff(suicide_clean$country, pop_clean$country)
setdiff(pop_clean$country, suicide_clean$country)

suicide_clean <- 
  suicide_clean %>% 
  mutate(countries = case_when(
    country == "Congo, Dem. Rep." ~ "Congo, Democratic Republic of the",
    country == "Congo, Rep." ~ "Congo, Republic of the",
    country == "Myanmar" ~ "Burma (Myanmar)",
    country == "Gambia" ~ "Gambia, The",
    country == "North Korea" ~ "Korea, North",
    country == "South Korea" ~ "Korea, South",
    country == "Kyrgyz Republic" ~ "Kyrgyzstan",
    country == "Lao" ~ "Laos",
    country == "North Macedonia" ~ "Macedonia",
    country == "Slovak Republic" ~ "Slovakia",
    country == "Eswatini" ~ "Swaziland",
    country == "UAE" ~ "United Arab Emirates",
    country == "UK" ~ "United Kingdom",
    country == "USA" ~ "United States",
    TRUE ~ country
  )) %>% 
  select(!country) %>% 
  select(countries, everything())


setdiff(suicide_clean$countries, pop_clean$country)

```

```{r include=F}
suicide_19 <- suicide_clean %>% 
  select(countries, `2019`)

suicide_90_19 <-
  suicide_clean %>% 
  select(countries, `1990`, `2019`) %>% 
  mutate(pct_increase = round(((`2019`-`1990`)/`1990`)*100))

highest_suicide_country <- 
  suicide_19 %>% 
  arrange(desc(`2019`)) %>% 
  head(1) %>% 
  pull(countries)

suicide_pop <-
  suicide_19 %>% 
  left_join(pop_clean, 
            by = c("countries" = "country")) %>%  
  mutate(suicide_per10K = round((`2019`/`population`)*10000, 2))
  

suicide_long <-
  suicide_clean %>% 
  pivot_longer(cols = `1990`:`2019`,
               names_to = "year",
               values_to = "suicides")

highest_suicide_country_10K <- 
  suicide_pop %>% 
  arrange(desc(suicide_per10K)) %>% 
  head(1) %>% 
  pull(countries)

total_suicide_lesotho_19 <-
  suicide_pop %>% 
  arrange(desc(suicide_per10K)) %>% 
  head(1) %>% 
  pull(`2019`)

highest_suicide_19 <-
  suicide_pop %>% 
  arrange(desc(`2019`)) %>% 
  head(1) %>% 
  pull(`2019`)

highest_suicide_country <-
  suicide_pop %>% 
  arrange(desc(`2019`)) %>% 
  head(1) %>% 
  pull(countries)

highest_increase_90_19_country <-
  suicide_90_19 %>% 
  arrange(desc(pct_increase)) %>% 
  head(1) %>% 
  pull(countries)

highest_increase_90_19 <-
  suicide_90_19 %>% 
  arrange(desc(pct_increase)) %>% 
  head(1) %>% 
  pull(pct_increase)


happy_clean <- 
  happy %>% 
  select(country, `2005`:`2019`) %>% 
  pivot_longer(cols = `2005`:`2019`,
               names_to = "year",
               values_to = "happindex")
View(happy_clean)


setdiff(suicide_clean$countries, pop_clean2$country)
setdiff(pop_clean2$country, suicide_clean$countries)

suicide_clean2 <-
  suicide_clean %>% 
  mutate(country = case_when(
  countries == "United Arab Emirates" ~ "UAE",
  countries == "Congo, Democratic Republic of the" ~ "Congo, Dem. Rep.",
  countries == "Congo, Republic of the" ~ "Congo, Rep.",
  countries == "United Kingdom" ~ "UK",
  countries == "Gambia, The" ~ "Gambia",
  countries == "Kyrgyzstan" ~ "Kyrgyz Republic",
  countries == "Korea, South" ~ "South Korea",
  countries == "Laos" ~ "Lao",
  countries == "Macedonia" ~ "North Macedonia",
  countries == "Burma (Myanmar)" ~ "Myanmar",
  countries == "Korea, North" ~ "North Korea",
  countries == "Slovakia" ~ "Slovak Republic",
  countries == "Swaziland" ~ "Eswatini",
  countries == "United States" ~ "USA",
  TRUE ~ countries 
)) %>% 
  select(!countries) %>% 
  pivot_longer(cols = `1990`:`2019`,
               names_to = "year",
               values_to = "suicides")

View(suicide_clean2)
setdiff(suicide_clean2$country, pop_clean2$country)

suicide_clean3 <- 
  left_join(suicide_clean2, pop_clean2, by = c("country", "year"))

View(suicide_clean3)


setdiff(happy_clean$country, suicide_clean3$country)
setdiff(suicide_clean3$country, happy_clean$country)

suicide_happy <- 
  left_join(suicide_clean3, happy_clean, by = c("country", "year"))


hdi_long <-
  hdi %>% 
  select(country, `1990`:`2019`) %>% 
  pivot_longer(cols = `1990`:`2019`,
               names_to = "year",
               values_to = "hdi")

View(hdi_long)

top_hdi <- 
  hdi_long %>%
  group_by(year) %>%
  slice_max(hdi, n = 1) %>%  
  select(year, country, hdi)  

View(top_hdi)


setdiff(happy_clean$country, hdi$country)
setdiff(hdi$country, happy_clean$country)

complete_data <-
  left_join(suicide_happy, hdi_long, by = c("country", "year"))

View(complete_data)
```

```{r include=FALSE}
suicide_plot <- 
  suicide_clean3 %>% 
  filter(suicides > 10000) %>% 
 ggplot(aes(x = suicides, 
            y = population, 
            frame = year,
            color = country)) +
 geom_point() +
 scale_x_log10() +
 theme_minimal()

ggplotly(suicide_plot)



top_5_graph <-
  suicide_long %>%
  filter(countries %in% c("Lesotho", "Guyana", "Suriname", "Korea, South", "Ukraine")) %>%  
      ggplot() +
  geom_line(aes(x = year,
                y = suicides,
                group = countries,
                colour = countries)) + 
  theme_grey()
top_5_graph



```

```{r include=FALSE}

# Mapping

country_shapes <- rnaturalearth::ne_countries()

setdiff(suicide_19$countries, country_shapes$sovereignt)
setdiff(country_shapes$sovereignt, suicide_19$countries)


suicide_geo <- 
  suicide_pop %>% 
    mutate(country = case_when(
      countries == "Congo, Democratic Republic of the" ~ "Democratic Republic of the Congo",
      countries == "Congo, Republic of the" ~ "Republic of the Congo",
      countries == "Bahamas" ~ "The Bahamas",
      countries == "Timor-Leste" ~ "East Timor",
      countries == "Cote d'Ivoire" ~ "Ivory Coast",
      countries == "Gambia, The" ~ "Gambia",
      countries == "Burma (Myanmar)" ~ "Myanmar",
      countries == "Korea, North" ~ "North Korea",
      countries == "Korea, South" ~ "South Korea",
      countries == "Swaziland" ~ "eSwatini",
      countries == "Czech Republic" ~ "Czechia",
      countries == "Tanzania" ~ "United Republic of Tanzania",
      countries == "United States" ~ "United States of America",
      countries == "Macedonia" ~ "North Macedonia",
      countries == "Serbia" ~ "Republic of Serbia",
      TRUE ~ countries
    )) %>% 
  select(!countries) %>% 
  select(country, everything())

setdiff(suicide_geo$country, country_shapes$sovereignt)

suicide_geo <- 
  suicide_geo %>% 
  mutate(
    country_code = countrycode(country, 
                               "country.name", 
                               "iso3c"))

suicide_map <- 
  left_join(country_shapes, suicide_geo, 
          by = c("adm0_a3" = "country_code")) %>% 
  mutate(tooltip_label = paste(country,
                               suicide_per10K, 
                               sep = ": ")) %>% 
  ggplot() + 
  geom_sf(aes(fill = suicide_per10K, text = tooltip_label)) + 
  theme_void()+ 
  theme(legend.position = "none")

suicide_map_ggplotly <- ggplotly(suicide_map, tooltip = "text")
```

```{r include=FALSE}

# Plots

top_5_countries <- 
  suicide_19 %>% 
  arrange(desc(`2019`)) %>% 
  head(5) %>% 
  mutate(tooltip_label = paste(countries, 
                               `2019`, 
                               sep = ": ")) %>% 
  ggplot(aes(y = reorder(countries, `2019`), 
             x = `2019`, 
             fill = `2019`, 
             text = tooltip_label)) + 
  geom_col() +  
  labs(y = "Country", 
       x = "Number of Suicides") + 
  theme(legend.position = "none") 


top_5_countries_ggplotly <- 
  ggplotly(top_5_countries, tooltip = "text")

top_5_countries



top_5_countries_10k <- 
  suicide_pop %>% 
  arrange(desc(suicide_per10K)) %>% 
  head(5) %>% 
  mutate(tooltip_label = paste(countries, 
                               suicide_per10K, 
                               sep = ": ")) %>% 
  ggplot(aes(y = reorder(countries, suicide_per10K), 
             x = suicide_per10K, 
             fill = round(suicide_per10K, 2), 
             text = tooltip_label)) + 
  geom_col() +  
  labs(y = "Country", 
       x = "Number of Suicides per 10,000 people") + 
  theme(legend.position = "none") 


top_5_countries_10k_ggplotly <- 
  ggplotly(top_5_countries_10k, tooltip = "text")

top_5_countries_10k
```

```{r include=FALSE}
# Dynamic plots

happy_suicide_plot <- 
  suicide_happy %>% 
  filter(year > 2005) %>% 
  filter(country %in% c("Lesotho", "Ukraine", "Korea, South", "Guyana", "Suriname", "UAE")) %>% 
 ggplot(aes(x = suicides, 
            y = happindex, 
            frame = year,
            color = country)) +
 geom_point() +
 scale_x_log10() +
 theme_minimal()

ggplotly(happy_suicide_plot)


complete_plot_10k <- 
  complete_data %>% 
  filter(year > 2005) %>% 
  filter(country %in% c("Lesotho", "Ukraine", "South Korea", "Guyana", "Suriname")) %>% 
 ggplot(aes(x = suicides, 
            y = hdi, 
            frame = year,
            color = country)) +
 geom_point() +
 scale_x_log10() +
 theme_minimal() +
  labs(x = "Suicides",
       y = "Human Development Index",
       colour = "Countries")


complete_plot_top <- 
  complete_data %>% 
  filter(year > 2005) %>% 
  filter(country %in% c("USA", "Russia", "India", "China", "Japan")) %>% 
 ggplot(aes(x = suicides, 
            y = hdi, 
            frame = year,
            color = country)) +
 geom_point() +
 scale_x_log10() +
 theme_minimal() +
  labs(x = "Suicides",
       y = "Human Development Index",
       colour = "Countries")


hdi_suicide_uae <- 
  complete_data %>% 
  filter(year > 2005) %>% 
  filter(country == "UAE") %>% 
 ggplot(aes(x = suicides, 
            y = hdi, 
            frame = year,
            color = country)) +
 geom_point() +
 scale_x_log10() +
 theme_minimal() +
  labs(x = "Suicides",
       y = "Human Development Index",
       colour = "Country")

complete_10k_ggplotly <- ggplotly(complete_plot_10k)

complete_top_ggplotly <- ggplotly(complete_plot_top)

uae_ggplotly <- ggplotly(hdi_suicide_uae)
```




# HOME

## Row 1 {height="25%"}


```{r}
value_box(
  title = "Country with highest number of suicides in 2019",
  value = tags$p(highest_suicide_country, style = "font-size: 200%;"),
  showcase = bsicons::bs_icon("geo"),
  theme = value_box_theme(bg = "#214773"),
  p(paste0("Number of suicides in 2019: ", comma(highest_suicide_19, digits = 0)))
)
```

```{r}
value_box(
  title = "Country with highest number of suicides per 10,000 people in 2019",
  value = tags$p(highest_suicide_country_10K, style = "font-size: 200%;"),
  showcase = bsicons::bs_icon("geo-fill"),
  theme = value_box_theme(bg = "#518fd6"),
  p(paste0("Number of suicides in 2019: ", total_suicide_lesotho_19))
)
```

```{r}
value_box(
  title = "Country with highest relative increase in the reported number of suicides",
  value = tags$p(highest_increase_90_19_country, style = "font-size: 200%;"),
  showcase = bsicons::bs_icon("graph-up-arrow"),
  theme = value_box_theme(bg = "#701515"),
  p(paste0("Increase between 1990 and 2019: ", highest_increase_90_19, " %"))
)
```


## Row 2 {height="75%"}

###  {width="60%"}


```{r title = "Number of suicides per 10,000 people per country in 2019"}
suicide_map_ggplotly
```


###  {width="40%"}

####  {height="50%"}


```{r title = "Top 5 countries: number of suicides in 2019"}
top_5_countries_ggplotly
```


####  {height="50%"}


```{r title = "Top 5 countries: number of suicides per 10,000 people in 2019"}
top_5_countries_10k_ggplotly
```


# PLOTS

## {width="50%"}

### {height="50%"}


```{r}
uae_ggplotly
```



## {width="50%"}

```{r title = "Evolution of suicide rates and HDI in countries with highest number of suicides per 10,000 people"}
complete_10k_ggplotly
```

```{r title = "Evolution of suicide rates and HDI in countries with highest number of suicides"}
complete_top_ggplotly
```





# DATA

The data used in this dashboard is shown below and can be downloaded as a CSV.


```{r}
library(htmltools)

htmltools::browsable(
  tagList(
    reactable(suicide_pop, 
              elementId = "suicide-table", 
              searchable = T, 
              filterable = T), 
    
tags$button("Download as CSV", 
            onclick = "Reactable.downloadDataCSV('suicide-table')")
  )
)
```


# ABOUT

This data comes from the r `gapminder` package, and is originally sourced from the Gapminder Foundation.

The Gapminder Foundation is a non-profit venture registered in Stockholm, Sweden, that promotes sustainable global development and achievement of the United Nations Millennium Development Goals by increased use and understanding of statistics and other information about social, economic, and environmental development at local, national, and global levels.

Gapminder was founded in 2005 by Ola Rosling, Anna Rosling R√∂nnlund, and Hans Rosling. The name Gapminder was derived from the "Mind the Gap" warning messages on the London Underground.

An example of one of Hans Rosling's videos is shown below:

<iframe width="560" height="315" src="https://www.youtube.com/embed/hVimVzgtD6w?si=hjxf5ryxh7mx5A4R" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen>

</iframe>

